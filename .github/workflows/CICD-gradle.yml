name: CI/CD Pipeline

on:
  push:
    branches: [ dev ]
#  pull_request:
#    branches: [ dev ]
# 테스트를 우선 진행
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make Gradlew executable
        run: chmod +x ./gradlew

      - name: Test with Gradle
        run: ./gradlew test --console=plain
  # 테스트를 통과하면 JAR파일 빌드
  boot-jar-with-push-image:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make Gradlew executable
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0

#      - name: make application-dev.yml
#        run: |
#          cd ./src/main/resources
#          touch ./application-dev.yml
#          echo "${{ secrets.YAML_DEV }}" > ./application-dev.yml
#        shell: bash

      # kube ci-cd test
      - name: make application.yaml
        run: |
          cd ./src/main/resources
          touch ./application.yaml
          echo "${{ secrets.YAML_DEV }}" > ./application.yaml
        shell: bash

      - name: Build JAR with Gradle Wrapper
        run: ./gradlew clean build

      - name: package check
        run: ls

      - name: Set Image Tag
        id: image-tag
        run: echo "TAG=$(date +%s)-ci" >> "$GITHUB_OUTPUT"

#      - name: Build the Docker image
#        env:
#          TAG: ${{ steps.image-tag.outputs.TAG }}
#        run: docker build . --file Dockerfile --tag "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:$TAG"
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Push the Docker Image
#        env:
#          TAG: ${{ steps.image-tag.outputs.TAG }}
#        run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:$TAG"
#
#      - name: Tag Image as Latest
#        env:
#          TAG: ${{ steps.image-tag.outputs.TAG }}
#        run: |
#            docker tag "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:$TAG" \
#            "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:latest"
#
#      - name: Push Latest
#        run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:latest"

      # kube ci-cd test
      - name: Build the Docker image
        env:
          TAG: ${{ steps.image-tag.outputs.TAG }}
        run: docker build . --file Dockerfile --tag "${{ secrets.REGISTRY }}/main-server:$TAG"

      - name: Login to Custom Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push the Docker Image
        env:
          TAG: ${{ steps.image-tag.outputs.TAG }}
        run: docker push "${{ secrets.REGISTRY }}/main-server:$TAG"

      - name: Tag Image as Latest
        env:
          TAG: ${{ steps.image-tag.outputs.TAG }}
        run: |
          docker tag "${{ secrets.REGISTRY }}/main-server:$TAG" \
          "${{ secrets.REGISTRY }}/main-server:latest"

      - name: Push Latest
        run: docker push "${{ secrets.REGISTRY }}/main-server:latest"

      # Kubernetes 설정
      - name: Create .ncloud directory and configure file
        run: |
          mkdir -p $HOME/.ncloud
          touch $HOME/.ncloud/configure
          echo "ncloud_access_key_id=${{ secrets.REGISTRY_USERNAME }}" >> $HOME/.ncloud/configure
          echo "ncloud_secret_access_key=${{ secrets.REGISTRY_PASSWORD }}" >> $HOME/.ncloud/configure
          echo "ncloud_api_url=https://ncloud.apigw.ntruss.com" >> $HOME/.ncloud/configure

      - name: Install ncp-iam-authenticator
        run: |
          curl -o ncp-iam-authenticator -L https://github.com/NaverCloudPlatform/ncp-iam-authenticator/releases/latest/download/ncp-iam-authenticator_linux_amd64
          chmod +x ./ncp-iam-authenticator
          mkdir -p $HOME/bin
          cp ./ncp-iam-authenticator $HOME/bin/ncp-iam-authenticator
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v1

      - name: Load Kubeconfig
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/main-deployment main-deployment="${{ secrets.REGISTRY }}/main-server:latest"
          kubectl rollout restart deployment/main-deployment

