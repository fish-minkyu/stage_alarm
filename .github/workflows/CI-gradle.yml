name: CI/CD Pipeline

on:
  push:
    branches: [ CICD ]
  pull_request:
    branches: [ CICD ]
# 테스트를 우선 진행
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make Gradlew executable
        run: chmod +x ./gradlew

      - name: Test with Gradle
        run: ./gradlew test --console=plain
  # 테스트를 통과하면 JAR파일 빌드
  boot-jar:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make Gradlew executable
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0

      - name: make application-dev.yml
        if: contains(github.ref, 'develop')
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.YAML_DEV }}" > ./application-dev.yml
        shell: bash

      - name: Build JAR with Gradle Wrapper
        run: ./gradlew clean build

      - name: Upload JAR
        uses: actions/upload-artifact@v4

      - name: Set Image Tag
        id: image-tag
        run: echo "TAG=$(date +%s)-ci" >> "$GITHUB_OUTPUT"

      - name: Build the Docker image
        env:
          TAG: ${{ steps.image-tag.outputs.TAG }}
        run: docker build . --file Dockerfile --tag "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:$TAG"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push the Docker Image
        env:
          TAG: ${{ steps.image-tag.outputs.TAG }}
        run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:$TAG"

      - name: Tag Image as Latest
        env:
          TAG: ${{ steps.image-tag.outputs.TAG }}
        run: |
            docker tag "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:$TAG" \
            "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:latest"

      - name: Push Latest
        run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:latest"
#      - name: Upload JAR
#        uses: actions/upload-artifact@v4
#        with:
#          name: artifact-stage
#          path: build/libs/*.jar

#  deliver:
#    runs-on: ubuntu-latest
#    needs: boot-jar
#    steps:
##      - uses: actions/checkout@v4
#      - name: Set Image Tag
#        id: image-tag
#        run: echo "TAG=$(date +%s)-ci" >> "$GITHUB_OUTPUT"
#
#      - name: package check
#        run: ls
#
#      - name: Build the Docker image
#        env:
#          TAG: ${{ steps.image-tag.outputs.TAG }}
#        run: docker build . --file Dockerfile --tag "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:$TAG"
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Push the Docker Image
#        env:
#          TAG: ${{ steps.image-tag.outputs.TAG }}
#        run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/todo-boot:$TAG"
